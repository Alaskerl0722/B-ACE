[gd_scene load_steps=6 format=3 uid="uid://dfarp48ymriq3"]

[sub_resource type="GDScript" id="GDScript_0l63d"]
script/source = "extends RigidBody3D

const SConv = preload(\"res://Figther_assets.gd\").SConv

var target: Node3D
var speed: float = 150.0 # Assuming initial speed, you may adjust or remove based on thrust application
var turn_speed: float = 2.0
var thrust_acceleration: float = 30.0 # Initial acceleration due to thrust
var drag_coefficient: float = 0.1 # Simplified drag coefficient
var gravity_effect: float = 9.81 # Gravity effect, considering only for loft and dive adjustments

var time_of_flight: float = 35.0 
var pitbull = false

var initial_velocity: Vector3
var n_steps = 0

var shooter = null
var upLink_support = true
var flight_phase = \"loft\" # Possible values: \"loft\", \"cruise\", \"dive\"

func is_type(type): return type == \"Missile\" 
func get_type(): return \"Missile\"		

func _ready():
	linear_velocity = initial_velocity
	$Timer.wait_time = time_of_flight
	$Timer.start()

func launch(_shooter, _target):
		
	set_shooter(_shooter)
	set_target(_target)
	
	linear_velocity = shooter.velocity	
	upLink_support = true

func _integrate_forces(state: PhysicsDirectBodyState3D) -> void:	
	if target:
		var altitude = global_transform.origin.y
		var speed = linear_velocity.length()
		var drag = -drag_coefficient * speed * speed # Simplified drag force
		
		var thrust = 0.0
		if n_steps < time_of_flight / 4: 
			thrust = thrust_acceleration # Apply thrust only in the first quarter
		
		# Adjust velocity based on current flight phase and physics
		var acceleration = (thrust + drag) / mass - gravity_effect # Simplifying gravity's role
		linear_velocity += transform.basis.z.normalized() * acceleration * get_physics_process_delta_time()
		
		if pitbull or n_steps >= time_of_flight / 4:
			flight_phase = \"dive\" # Transition to dive phase post loft or based on other conditions
			var direction_to_target: Vector3 = (target.global_transform.origin - global_transform.origin).normalized()
			linear_velocity = linear_velocity.lerp(direction_to_target * speed, turn_speed * get_physics_process_delta_time())

		if linear_velocity.length() > 0.01 and (upLink_support or pitbull):
			look_at(global_transform.origin + linear_velocity, Vector3.UP)

	n_steps += 1

func set_target(new_target: Node3D) -> void:
	target = new_target

func set_shooter(_shooter: Node3D) -> void:
	shooter = _shooter

func lost_support():	
	upLink_support = false

func recover_support():	
	upLink_support = true

func _on_area_3d_area_entered(area):
	var body = area.get_parent()	
	if body.is_type(\"Fighter\") and body != shooter:	
		if body.activated:
			body.own_kill()		
			shooter.ownRewards.add_hit_enemy_rew()
		queue_free() 

func _on_timer_timeout():
	queue_free()
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ibwa0"]
albedo_color = Color(1, 0.0901961, 0.0901961, 1)
emission_enabled = true
emission = Color(0.992157, 0.184314, 0.054902, 1)
emission_energy_multiplier = 4.85

[sub_resource type="CapsuleMesh" id="CapsuleMesh_1xecw"]
lightmap_size_hint = Vector2i(8, 13)
material = SubResource("StandardMaterial3D_ibwa0")
radius = 0.3
radial_segments = 6
rings = 3

[sub_resource type="CapsuleMesh" id="CapsuleMesh_3tfsy"]
radius = 0.3
height = 3.923
radial_segments = 4
rings = 1

[sub_resource type="SphereShape3D" id="SphereShape3D_16o7b"]

[node name="Missile" type="RigidBody3D"]
collision_layer = 0
collision_mask = 0
mass = 22.26
script = SubResource("GDScript_0l63d")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(7.64274e-15, -1.74846e-07, -4, -4, -1.74846e-07, 0, -1.74846e-07, 4, -1.74846e-07, -2.79206e-07, -2.79206e-07, 6.3875)
layers = 2
mesh = SubResource("CapsuleMesh_1xecw")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(7.64274e-15, -1.74846e-07, -4, -4, -1.74846e-07, 0, -1.74846e-07, 4, -1.74846e-07, 1.25438e-07, 1.25438e-07, -2.86968)
layers = 2
mesh = SubResource("CapsuleMesh_3tfsy")

[node name="Timer" type="Timer" parent="."]
process_callback = 0
wait_time = 10.0
one_shot = true
autostart = true

[node name="Area3D" type="Area3D" parent="."]
collision_layer = 2

[node name="CollisionShape3D" type="CollisionShape3D" parent="Area3D"]
shape = SubResource("SphereShape3D_16o7b")

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
[connection signal="area_entered" from="Area3D" to="." method="_on_area_3d_area_entered"]
